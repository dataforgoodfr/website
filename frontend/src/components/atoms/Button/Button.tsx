import type { MouseEventHandler, PropsWithChildren } from 'react';
import clsx from 'clsx';
import Link from 'next/link';

type Variant = 'primary' | 'secondary' | 'tertiary';
type Color = 'black' | 'white' | 'violet';

type ButtonChildrenProps = {
  variant: Variant;
  color: Color;
  hasArrow: boolean;
} & PropsWithChildren;

export type ButtonProps = {
  href?: string;
  onClick?: MouseEventHandler<HTMLButtonElement>;
  className?: string;
  variant?: Variant;
  color?: Color;
  isBlank?: boolean;
  type?: 'button' | 'submit';
  disabled?: boolean;
  hasArrow?: boolean;
} & PropsWithChildren;

const ArrowRightIcon = () => {
  return <svg width="9" height="14" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M2.64749 13.4707C2.64591 13.4977 2.55694 13.4491 2.53644 13.4624C2.44986 13.5171 2.37599 13.4956 2.285 13.5325C2.15001 13.5872 1.95902 13.959 1.48113 13.4811C1.48112 13.4811 1.48111 13.4811 1.48109 13.4811C1.47641 13.4764 1.47169 13.4716 1.46695 13.4668C1.3769 13.3748 1.30145 13.2514 1.20204 13.1449C1.10258 13.0384 0.434968 12.3761 0.43158 12.3047C0.431607 12.2062 0.720344 12.2584 0.739077 12.2246C0.751842 12.2014 0.713519 12.1188 0.725766 12.0851C0.76527 11.9764 0.848247 11.9818 0.7508 11.7509C0.864036 11.8107 0.977271 11.8705 1.09051 11.9304C1.08523 11.8554 1.25215 11.9167 1.26703 11.8893C1.27923 11.8667 1.22098 11.7881 1.23589 11.7669C1.25224 11.7426 1.35727 11.7853 1.38307 11.7372C1.4257 11.6588 1.25797 11.4695 1.27162 11.4106C1.28582 11.3494 1.44141 11.3879 1.42665 11.277C1.41304 11.2513 1.39943 11.2257 1.38582 11.2C1.33709 11.1599 1.28837 11.1198 1.23964 11.0797C1.24317 11.0349 1.34459 11.1155 1.36848 11.0949C1.39664 11.0707 1.3237 10.9711 1.34171 10.9538C1.35654 10.9398 1.44528 10.9895 1.45965 10.9664C1.48096 10.9332 1.3751 10.8392 1.37108 10.8059C1.36967 10.7928 1.42279 10.6294 1.4281 10.6225C1.47061 10.5721 1.61139 10.7048 1.66038 10.6797C1.79571 10.6096 1.79067 10.3937 1.84392 10.2569C1.86767 10.1958 1.91988 10.1595 1.98406 10.139C2.26738 10.5556 2.68719 10.6805 2.08444 10.1881C2.20941 10.2189 2.09496 10.0377 2.16458 10.0181C2.20974 10.0055 2.30564 10.0615 2.34486 10.0183C2.41397 9.94114 2.27813 9.64534 2.68926 10.0144C2.70633 9.8598 2.92217 9.92696 2.60873 9.55165C2.60983 9.50847 2.87168 9.65687 2.92437 9.65991C2.97409 9.66268 3.24686 9.57516 3.2815 9.55086C3.31614 9.52656 3.37335 9.48059 3.36796 9.42556C3.36176 9.35699 3.02641 8.97806 3.4995 9.34011C3.53026 9.24177 3.5652 9.23072 3.67375 9.2192C3.69339 9.2171 3.75662 9.27787 3.76302 9.27158C3.7761 9.2585 3.75255 9.19043 3.77031 9.16149C3.79956 9.11394 3.95191 9.22248 3.74839 9.02751C3.7403 8.96879 3.73221 8.91008 3.72412 8.85136C3.77146 8.88093 3.81879 8.9105 3.86613 8.94008C3.83775 8.88464 3.80938 8.8292 3.78101 8.77375C4.05343 9.07796 3.97855 8.81257 3.78218 8.67806C3.8909 8.68864 3.99962 8.69921 4.10834 8.70978C4.42917 9.04431 4.2539 8.63985 4.06608 8.47133C4.07196 8.46597 4.07783 8.46062 4.08371 8.45526C4.21996 8.4932 4.19387 8.37682 4.31225 8.37536C4.43062 8.3739 4.4569 8.41143 4.62584 8.54393C4.63131 8.5212 4.63677 8.49847 4.64224 8.47574C4.30303 7.98856 5.00534 8.71703 4.81507 8.27339C5.11524 8.4926 5.0786 8.25642 5.06602 8.11152C5.06457 8.09468 5.01429 8.04414 5.009 8.01834C4.99669 7.9559 5.12545 7.95674 4.96067 7.79633C5.02985 7.82124 5.09904 7.84614 5.16822 7.87104C5.15675 7.82338 5.14529 7.77572 5.13382 7.72806C5.08297 7.6774 5.03213 7.62673 4.98128 7.57607C5.1907 7.71261 5.18149 7.58887 5.25109 7.60198C5.26509 7.60475 5.33632 7.67355 5.37289 7.67517C5.41598 7.67742 5.43332 7.61865 5.47953 7.61619C5.41143 7.52917 5.34334 7.44215 5.27524 7.35514C5.27669 7.26955 5.4967 7.45897 5.53815 7.44932C5.54552 7.44748 5.61475 7.34883 5.6149 7.33994C5.61729 7.26827 5.4324 7.10436 5.57684 7.03463C5.60267 7.02232 5.67844 7.06724 5.6981 7.05243C5.73292 7.02636 5.6878 6.79775 5.56855 6.66407C5.76376 6.78542 5.79787 6.62192 5.87271 6.63855C5.89556 6.64383 5.99836 6.74266 6.04681 6.73712C6.0862 6.73273 6.06184 6.59563 6.10311 6.58138C6.14729 6.56663 6.24251 6.6408 6.2617 6.63358C6.27974 6.62668 6.22287 6.54681 6.24026 6.53021C6.29571 6.47953 6.45381 6.54152 6.49777 6.50161C6.49844 6.501 6.4991 6.50037 6.49972 6.49972V7.50028C6.43874 7.44153 6.18665 7.58766 6.04751 7.62637C6.04804 7.60065 6.07912 7.54483 6.06631 7.53122C5.90931 7.36149 5.76231 7.13991 5.64181 6.93271C5.58565 6.83673 5.67126 6.37281 5.26328 6.88176C5.15656 6.93561 5.14919 6.55856 5.11542 6.51922C5.08162 6.47991 4.97044 6.53315 4.9405 6.50563C4.85022 6.42251 4.84841 6.30222 4.67129 6.26827C4.62532 6.25973 4.49873 6.32792 4.48372 6.31065C4.46587 6.28962 4.53914 6.1745 4.51993 6.14333C4.47341 6.06977 4.33055 5.98887 4.28924 5.91497C4.28191 5.90127 4.36092 5.81487 4.37173 5.77398C4.41416 5.6144 4.33975 5.55751 4.08731 5.83319C4.16214 5.6082 3.95595 5.67549 3.878 5.6143C3.71379 5.48429 3.50746 5.15469 3.26835 5.13749C3.11755 5.12668 3.00119 5.24718 2.98441 5.02601C2.98067 4.97694 2.98495 4.92008 2.97995 4.86101C2.9685 4.7223 3.11841 4.43463 2.79754 4.64104C2.78253 4.48928 2.66763 4.47136 2.83123 4.18402C2.76985 4.2308 2.70848 4.27758 2.64711 4.32437C2.63555 4.31548 2.62399 4.3066 2.61243 4.29771C2.66081 4.24295 2.7092 4.18818 2.75758 4.13342C2.69823 4.0463 2.39334 4.16536 2.33289 4.10182C2.23133 3.99549 2.04598 3.64542 2.01701 3.47727C2.00164 3.38798 1.88837 3.49563 2.08547 3.23861C2.05797 3.2427 2.03047 3.24679 2.00297 3.25089C1.94593 3.29328 1.88888 3.33568 1.83184 3.37807C1.76272 3.31293 1.76032 3.15608 1.69558 3.09291C1.57745 2.97797 1.26562 2.93981 1.23847 2.73291C1.23179 2.6809 1.29765 2.54169 1.26775 2.51412C1.22434 2.47389 1.04403 2.63387 0.987775 2.58398C0.891136 2.49768 0.918456 2.12967 0.816889 2.05833C0.786833 2.03703 0.711542 2.08836 0.687051 2.07739C0.583671 2.03207 0.527786 1.96588 0.358663 1.99242C0.445166 1.75282 0.66224 1.54897 0.850881 1.31288C0.993184 1.13462 1.3095 0.708044 1.44206 0.559842C1.53518 0.455723 1.68257 0.349381 1.78343 0.23312C1.96183 0.238138 1.90492 0.372106 1.82668 0.599288C1.9703 0.73073 2.11391 0.862173 2.25752 0.993615C2.21078 1.06538 2.16403 1.13715 2.11729 1.20892C2.11716 1.20905 2.11703 1.20918 2.1169 1.20931C2.10133 1.33051 2.27632 1.20029 2.33944 1.19414C2.94381 1.13516 3.22094 1.93147 3.48376 2.26906C3.5405 2.3417 3.83079 2.47229 3.77894 2.61292C3.76537 2.64947 3.67719 2.74404 3.68545 2.76025C3.84902 2.81515 4.01259 2.87005 4.17617 2.92495C4.25883 3.29156 4.60831 3.40654 4.85653 3.61101C5.52818 4.16415 6.20648 4.6984 6.78697 5.32264C6.89901 5.44343 7.1152 5.5227 7.18503 5.68081C7.21429 5.74668 7.08738 5.91323 7.25922 5.86636C7.22034 5.90655 7.18147 5.94673 7.14259 5.98692C7.24484 5.99373 7.36965 5.93862 7.43993 5.99061C7.49897 6.03454 7.64104 6.16488 7.67143 6.22548C7.68747 6.25663 7.60481 6.32171 7.62718 6.34334C7.63169 6.34757 7.63814 6.35102 7.6461 6.3539L8.25305 6.77849L7.6461 7.6461C7.62423 7.70669 7.63581 7.85467 7.58988 7.90061C7.5428 7.94769 7.37834 7.94196 7.35447 7.99049C7.26786 8.16459 7.25201 8.43271 7.07929 8.53782C7.03136 8.56663 6.88622 8.5202 6.87687 8.53489C6.85897 8.56393 6.94502 8.66397 6.94121 8.6917C6.92157 8.83224 6.68615 8.84652 6.60325 8.92064C6.33312 9.16214 6.10272 9.47376 5.83091 9.71137C5.65925 9.86156 5.4082 10.1454 5.18964 10.2239C5.14249 10.2409 5.04909 10.1304 5.02219 10.1573C4.99238 10.1871 5.04509 10.2722 5.03672 10.2917C4.9792 10.4271 4.83581 10.7097 4.67432 10.7305C4.64346 10.7343 4.551 10.667 4.5409 10.6777C4.53564 10.6829 4.57827 10.7493 4.56733 10.7714C4.47088 10.9665 4.33282 11.041 4.1713 11.1651C3.86237 11.4033 3.64681 11.8216 3.30458 12.0541C3.23004 12.1048 3.02912 11.9897 3.02191 12.0001C3.00578 12.0226 3.09967 12.1413 3.08679 12.2066C3.04295 12.423 2.75435 12.4848 2.68388 12.6619C2.64899 12.7492 2.69986 12.9681 2.66955 13.0581C2.64535 13.1301 2.47896 13.1906 2.51688 13.2711C2.5397 13.3199 2.64863 13.4408 2.64749 13.4707ZM2.47745 10.0631C2.65262 10.2554 2.5899 10.0127 2.45752 9.94783C2.42771 9.93322 2.43197 10.0132 2.47745 10.0631ZM6.16943 6.99085C6.11777 7.04416 6.06611 7.09746 6.01445 7.15076C6.0481 7.14074 6.08175 7.13071 6.1154 7.12068C6.14031 7.08249 6.16522 7.04431 6.19013 7.00612C6.18323 7.00103 6.17633 6.99594 6.16943 6.99085Z" fill="black" className="fill-current"/>
  </svg>
};

const ButtonChildren = ({ children, hasArrow, variant, color }: ButtonChildrenProps) => {
  const variantsChildrenClasses: Partial<Record<Variant, {base: string, colors: Record<Color, string>}>> = {
    primary: {
      base: 'relative px-4 py-2.5',
      colors: {
        black: 'bg-black text-white',
        white: 'bg-white text-black',
        violet: 'bg-building text-white',
      },
    },
  };

  const classElement = clsx(
    'flex items-center gap-5 text-sm font-black uppercase',
    variantsChildrenClasses[variant]?.base,
    variantsChildrenClasses[variant]?.colors[color]
  );

  return (
    <span className={classElement}>
      {children}
      {hasArrow && <ArrowRightIcon />}
    </span>
  );
};

const Button: React.FC<ButtonProps> = ({
  href,
  onClick,
  children,
  className,
  variant = 'primary',
  color = 'black',
  type = 'button',
  isBlank,
  disabled,
  hasArrow = true,
  ...props
}) => {
  const variantsParentClasses: Record<Variant, {base: string, colors: Record<Color, string>}> = {
    primary: {
      base: 'relative z-1 before:absolute before:content-[""] before:-z-1 before:w-full before:h-full before:top-1 before:left-1 hover:before:top-0 hover:before:left-0 focus:before:top-0 focus:before:left-0 before:transition-base',
      colors: {
        black: 'before:bg-building',
        white: 'before:bg-building',
        violet: 'before:bg-black',
      },
    },
    secondary: {
      base: 'px-4 py-2.5',
      colors: {
        black: 'bg-black text-white hover:bg-white hover:text-black',
        white: 'bg-white text-black hover:bg-black hover:text-white',
        violet: 'bg-building text-white hover:bg-black hover:text-white',
      },
    },
    tertiary: {
      base: 'px-4 py-2.5 bg-white text-black',
      colors: {
        black: 'border border-black hover:bg-black hover:text-white',
        white: 'border border-white hover:bg-black hover:text-white',
        violet: 'border-[2px] border-building hover:bg-building hover:text-white',
      },
    },
  };

  const classElement = clsx(
    'inline-flex transition-colors',
    variantsParentClasses[variant].base,
    variantsParentClasses[variant].colors[color],
    className,
  );

  return (
    <>
      {href
        ? (
            <Link
              href={href}
              className={classElement}
              {...props}
              target={isBlank ? '_blank' : undefined}
              rel={isBlank ? 'noreferrer' : undefined}
            >
              <ButtonChildren variant={variant} color={color} hasArrow={hasArrow}>
                {children}
              </ButtonChildren>
            </Link>
          )
        : (
            <button
              onClick={onClick}
              type={type}
              disabled={disabled}
              className={classElement}
              {...props}
            >
              <ButtonChildren variant={variant} color={color} hasArrow={hasArrow}>
                {children}
              </ButtonChildren>
            </button>
          )}
    </>
  );
};

export default Button;
